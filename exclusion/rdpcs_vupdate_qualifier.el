//==================================================
// This file contains the Excluded objects
// Generated By User: aradan
// Format Version: 2
// Date: Fri Apr 22 16:37:18 2022
// ExclMode: default
//==================================================
CHECKSUM: "2518131506 4079565410"
//INSTANCE: tb.gpu0.chip0.core.udpcssys_tb_usb.dpcssys_tb_c20_usb0.rdpcs_pipe_usb.urdpcs_pipe_usb0.urdpcs_vupdate_qualifier
MODULE: rdpcs_vupdate_qualifier
Fsm req_state "4079565410"
ANNOTATION: " This transition is only possible if we have reset asserted in S_REQ_ROSE state or have Q_ENFORCE_REQ_ACK_4_WAY = 0 when in that states which is not legal, as Q_ENFORCE_REQ_ACK_4_WAY transition only is allowed to happen when FSM is in IDLE state. "
Transition S_REQ_ROSE->S_IDLE "1->0"
CHECKSUM: "2518131506 4157806258"
//INSTANCE: tb.gpu0.chip0.core.udpcssys_tb_usb.dpcssys_tb_c20_usb0.rdpcs_pipe_usb.urdpcs_pipe_usb0.urdpcs_vupdate_qualifier
MODULE: rdpcs_vupdate_qualifier
ANNOTATION: " default is 1, 1->0 is enough coverage "
Toggle 0to1 iQ_ENFORCE_REQ_ACK_4_WAY "net iQ_ENFORCE_REQ_ACK_4_WAY"
CHECKSUM: "2518131506 614433843"
//INSTANCE: tb.gpu0.chip0.core.udpcssys_tb_usb.dpcssys_tb_c20_usb0.rdpcs_pipe_usb.urdpcs_pipe_usb0.urdpcs_vupdate_qualifier
MODULE: rdpcs_vupdate_qualifier
ANNOTATION: " Not possible to cover, as S_WAIT_ACK_RISE happens only when req fall before ack rises. To cover this condition we need to have mstrack = 1 before coming to this state. "
Condition 18 "1054415165" "(((~ack_d1)) && DC_DPCS_cfg_mstrack) 1 -1" (1 "01")
ANNOTATION: " Not possible to cover, as S_WAIT_ACK_FALL happens only when mstrack = 1 . To cover this it is required to have both ack_d1 & mstrack = 0. "
Condition 17 "1392414145" "(ack_d1 && ((~DC_DPCS_cfg_mstrack))) 1 -1" (1 "01")
ANNOTATION: " Not possible to cover, as S_WAIT_REQ_FALL happens only when mstrreq = 1 . To cover this it is required to have both req_d1 & mstrreq = 0. "
Condition 16 "451512452" "(req_d1 && ((~DPCS_DC_cfg_mstrreq))) 1 -1" (1 "01")
ANNOTATION: " Not possible to cover, S_REQ_ROSE happens when cfg_mstrreq rises, but even if mstrreq deasserts next cycle, req_d1 which is delayed version just has risen. "
Condition 14 "3352598352" "(req_d1 && ((~DPCS_DC_cfg_mstrreq))) 1 -1" (1 "01")
//ANNOTATION: " Not possible to cover, as mstrack only rises as a response to mstrreq. But as soon as mstrreq rises FSM goes to S_REQ_ROSE and waits for mstrack to rises. To cover this condition we must have mstrack = 1 before mstrreq rises. "
//Condition 18 "1889078086" "(((~ack_d1)) && DC_DPCS_cfg_mstrack) 1 -1" (1 "01")
